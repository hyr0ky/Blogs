{
  "collapse-filter": false,
  "search": "好的，这是翻译后的内容：  你可以从这里开始跟随视频课程学习。 引言  在本课中，我们将升级 StorageFactory 合约，使其能够跟踪所有已部署的 SimpleStorage 合约。这也将使我们能够与每个已部署的合约进行单独交互。  存储已部署的合约  在当前版本的 StorageFactory 中，每次调用 createSimpleStorageContract 时，都会部署一个新的 SimpleStorage 合约并覆盖 simpleStorage 变量。之前的部署不会被记录下来。  为了解决这个问题，我们可以创建一个变量 listOfSimpleStorageContracts，它是一个 SimpleStorage 合约类型的数组。这样，每当创建一个新合约时，它就会被添加到一个动态数组中。 SimpleStorage[] public listOfSimpleStorageContracts; // 声明一个公共的动态数组，用于存储所有部署的 SimpleStorage 合约地址   然后我们可以修改 createSimpleStorageContract 函数，将新部署的合约推送到这个数组中。 function createSimpleStorageContract() public {     SimpleStorage simpleStorageContractVariable = new SimpleStorage(); // 部署一个新的 SimpleStorage 合约实例     listOfSimpleStorageContracts.push(simpleStorageContractVariable); // 将新合约的地址添加到数组中 }   在 Remix 中，你可以通过类型为 uint256 的索引（即部署合约在动态数组中的位置）来访问 listOfSimpleStorageContracts 数组中的合约。  与 SimpleStorage 合约交互  StorageFactory 可以通过调用已部署合约的 store 函数来与它们交互。为此，我们需要创建一个函数 sfStore： function sfStore(uint256 _simpleStorageIndex, uint256 _simpleStorageNumber) public {     // 这里将调用 SimpleStorage 合约的 store 函数 }   👀❗重要提示： 每次你需要与另一个合约交互时，都需要： 1.  合约地址：目标合约部署在区块链上的地址。 2.  合约 ABI (应用程序二进制接口)：一种与部署在区块链上的智能合约二进制版本交互的标准化方式。它规定了函数、函数参数以及可用于与合约交互的数据结构。它由编译器生成。  🗒️ 注意： 如果你没有完整的 ABI，函数选择器（function selector）也足够（后续课程会介绍）。  如果你转到 Solidity 编译标签页，会找到一个按钮，允许你将 ABI 复制到剪贴板。 (此处原文提及图片 interacting-contract1，表明在课程界面有相关截图)  🗒️ 注意： 在 Solidity 中，可以将一个地址（address）类型强制转换为合约类型（ContractName）。  我们现在可以继续在一个特定的 SimpleStorage 合约上存储一个新数字： function sfStore(uint256 _simpleStorageIndex, uint256 _simpleStorageNumber) public {     // 通过索引从数组中获取合约实例，并调用其 store 函数     listOfSimpleStorageContracts[_simpleStorageIndex].store(_simpleStorageNumber); }   然后，我们可以通过一个 get 函数来检索存储的值： function sfGet(uint256 _simpleStorageIndex) public view returns (uint256) {     // 方法1（注释掉）：先将地址转换为合约类型再调用 retrieve     // return SimpleStorage(address(listOfSimpleStorageContracts[_simpleStorageIndex])).retrieve();     // 方法2（推荐）：直接通过数组元素（已经是合约类型）调用 retrieve     return listOfSimpleStorageContracts[_simpleStorageIndex].retrieve(); }   结论  StorageFactory 合约能够创建一个 SimpleStorage 合约列表，向其中的每个合约存储一个变量，并读取回该值。  🧑💻 自我测试  📕  与外部合约交互需要什么？ (答：需要目标合约的地址和其ABI（或至少函数选择器）)  🧑💻  通过 StorageFactory 部署 3 个 SimpleStorage 合约实例。然后使用 sfStore 函数向它们存储一些数字，并使用 sfGet 函数检索所有这些数字。",
  "showTags": false,
  "showAttachments": false,
  "hideUnresolved": false,
  "showOrphans": true,
  "collapse-color-groups": true,
  "colorGroups": [],
  "collapse-display": true,
  "showArrow": false,
  "textFadeMultiplier": 0,
  "nodeSizeMultiplier": 1,
  "lineSizeMultiplier": 1,
  "collapse-forces": true,
  "centerStrength": 0.518713248970312,
  "repelStrength": 10,
  "linkStrength": 1,
  "linkDistance": 250,
  "scale": 1,
  "close": true
}